{"version":3,"sources":["webpack:///./src/pages/vendor.js","webpack:///./node_modules/core-js/modules/es6.string.link.js","webpack:///./src/components/VendorCard.js"],"names":["VendorPage","props","data","flavors","ingredients","vendor","state","nodes","render","this","title","name","className","to","Component","query","createHTML","url","VendorCard","code","link","flavorCount","Header","href","target","rel","variant","Body","description","length","activeKey","map","flavor","action","as","Link","key","getFlavorSlug","sortedIngredients","sort","a","b","category","toLowerCase","localeCompare","ingredient","casNumber","getIngredientSlug","getCategoryVariant"],"mappings":"sTASqBA,E,oBAKnB,WAAYC,GAAQ,IAAD,KACjB,cAAMA,IAAN,MAISA,MADPC,KAAQC,EAJO,EAIPA,QAASC,EAJF,EAIEA,YAAaC,EAJf,EAIeA,OAJf,OAOjB,EAAKC,MAAQ,CACXH,QAASA,EAAQI,MACjBH,YAAaA,EAAYG,MACzBF,UAVe,E,0GAcnBG,OAAA,WAAU,IAAD,EACkCC,KAAKH,MAAtCH,EADD,EACCA,QAASC,EADV,EACUA,YAAaC,EADvB,EACuBA,OAE9B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKK,MAAK,iBAAmBL,EAAOM,OACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAMC,GAAG,YAAT,WADF,MAC8CR,EAAOM,OAGvD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACMN,EADN,CAEEF,QAASA,EACTC,YAAaA,U,GApCWU,aA8C3BC,EAAK,c,kCCrDlB,EAAQ,OAAR,CAA0B,QAAQ,SAAUC,GAC1C,OAAO,SAAcC,GACnB,OAAOD,EAAWP,KAAM,IAAK,OAAQQ,Q,wwBCGpBC,E,sLA6EnBV,OAAA,WAAU,IAAD,EACmCC,KAAKR,MAAvCkB,EADD,EACCA,KAAMC,EADP,EACOA,KAAMT,EADb,EACaA,KAAMU,EADnB,EACmBA,YAE1B,OACE,kBAAC,IAAD,CAAMT,UAAU,QACd,kBAAC,IAAKU,OAAN,KACE,4BACE,8BAAOX,GACNS,EACC,0BAAMR,UAAU,WACd,uBAAGW,KAAMH,EAAKG,KAAMC,OAAO,SAASC,IAAI,uBACrCL,EAAKV,QAGR,KACJ,mCAASS,EAAT,KACA,kBAAC,IAAD,CAAOO,QAAQ,YAAYd,UAAU,eAClCS,EADH,cAKJ,kBAAC,IAAKM,KAAN,KACGlB,KAAKmB,YACLnB,KAAKN,QACLM,KAAKL,e,0CAvFK,IACTwB,EAAgBnB,KAAKR,MAArB2B,YAER,OAAOA,EAAc,2BAAIA,GAAmB,O,8BAG/B,IACLzB,EAAYM,KAAKR,MAAjBE,QAER,OAAOA,aAAA,EAAAA,EAAS0B,QACd,kBAAC,WAAD,KACE,wBAAIjB,UAAU,QAAd,wCACwCT,EAAQ0B,OADhD,KAGA,kBAAC,IAAD,CAAWC,UAAU,IAClB3B,EAAQ4B,KAAI,SAAAC,GAAM,OACjB,kBAAC,IAAD,CACEC,QAAM,EACNC,GAAIC,OACJC,IAAKJ,EAAOrB,KACZE,GAAIwB,wBAAcL,IAEjBA,EAAOrB,WAKd,O,kCAGa,IAGX2B,EAAiB,EAFC7B,KAAKR,MAArBG,aAUR,OANAkC,EAAkBC,MAChB,SAACC,EAAGC,GAAJ,OACED,EAAEE,SAASC,cAAcC,cAAcH,EAAEC,SAASC,gBAClDH,EAAE7B,KAAKgC,cAAcC,cAAcH,EAAE9B,KAAKgC,mBAGvCL,aAAA,EAAAA,EAAmBT,QACxB,kBAAC,WAAD,KACE,wBAAIjB,UAAU,QAAd,oCACoC0B,EAAkBT,OADtD,KAGA,kBAAC,IAAD,CAAWC,UAAU,IAClBQ,EAAkBP,KAAI,SAAAc,GAAU,OAC/B,kBAAC,IAAD,CACEZ,QAAM,EACNC,GAAIC,OACJC,IAAKS,EAAWC,UAChBjC,GAAIkC,4BAAkBF,GACtBnB,QAASsB,6BAAmBH,EAAWH,WAEtCG,EAAWlC,WAKlB,U,8BA1EgCG","file":"component---src-pages-vendor-js-386df8fc7545cbf1f145.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { graphql, Link } from 'gatsby';\nimport React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport Layout from '~components/Layout';\nimport SEO from '~components/SEO';\nimport VendorCard from '~components/VendorCard';\n\nexport default class VendorPage extends Component {\n  static propTypes = {\n    data: PropTypes.object.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {\n      data: { flavors, ingredients, vendor }\n    } = this.props;\n\n    this.state = {\n      flavors: flavors.nodes,\n      ingredients: ingredients.nodes,\n      vendor\n    };\n  }\n\n  render() {\n    const { flavors, ingredients, vendor } = this.state;\n\n    return (\n      <Layout>\n        <SEO title={`Vendor Info - ${vendor.name}`} />\n        <Container>\n          <Row className=\"mb-3\">\n            <Col>\n              <Link to=\"/vendors\">Vendors</Link> &raquo; {vendor.name}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <VendorCard\n                {...vendor}\n                flavors={flavors}\n                ingredients={ingredients}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nexport const query = graphql`\n  query VendorSearchQuery($code: String) {\n    vendor: vendorsJson(code: { eq: $code }) {\n      name\n      code\n      flavorCount\n    }\n    flavors: allFlavorsJson(filter: { vendor: { eq: $code } }) {\n      nodes {\n        name\n        ingredients\n        vendor\n      }\n    }\n    ingredients: allIngredientsJson {\n      nodes {\n        casNumber\n        category\n        name\n      }\n    }\n  }\n`;\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { Card, ListGroupItem, ListGroup, Badge } from 'react-bootstrap';\n\nimport { getCategoryVariant, getFlavorSlug, getIngredientSlug } from '~utils';\n\nexport default class VendorCard extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    code: PropTypes.string.isRequired,\n    flavorCount: PropTypes.number.isRequired,\n    link: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      href: PropTypes.string.isRequired\n    }),\n    description: PropTypes.string,\n    flavors: PropTypes.arrayOf(PropTypes.object),\n    ingredients: PropTypes.arrayOf(PropTypes.object)\n  };\n\n  get description() {\n    const { description } = this.props;\n\n    return description ? <p>{description}</p> : null;\n  }\n\n  get flavors() {\n    const { flavors } = this.props;\n\n    return flavors?.length ? (\n      <Fragment>\n        <h6 className=\"my-3\">\n          Flavors with concerning ingredients ({flavors.length})\n        </h6>\n        <ListGroup activeKey=\"\">\n          {flavors.map(flavor => (\n            <ListGroupItem\n              action\n              as={Link}\n              key={flavor.name}\n              to={getFlavorSlug(flavor)}\n            >\n              {flavor.name}\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      </Fragment>\n    ) : null;\n  }\n\n  get ingredients() {\n    const { ingredients } = this.props;\n\n    const sortedIngredients = [...ingredients];\n\n    sortedIngredients.sort(\n      (a, b) =>\n        a.category.toLowerCase().localeCompare(b.category.toLowerCase()) ||\n        a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n    );\n\n    return sortedIngredients?.length ? (\n      <Fragment>\n        <h6 className=\"my-3\">\n          Ingredients used by this vendor ({sortedIngredients.length})\n        </h6>\n        <ListGroup activeKey=\"\">\n          {sortedIngredients.map(ingredient => (\n            <ListGroupItem\n              action\n              as={Link}\n              key={ingredient.casNumber}\n              to={getIngredientSlug(ingredient)}\n              variant={getCategoryVariant(ingredient.category)}\n            >\n              {ingredient.name}\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      </Fragment>\n    ) : null;\n  }\n\n  render() {\n    const { code, link, name, flavorCount } = this.props;\n\n    return (\n      <Card className=\"my-3\">\n        <Card.Header>\n          <h3>\n            <span>{name}</span>\n            {link ? (\n              <span className=\"ml-auto\">\n                <a href={link.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {link.title}\n                </a>\n              </span>\n            ) : null}\n            <span> ({code})</span>\n            <Badge variant=\"secondary\" className=\"float-right\">\n              {flavorCount} flavors\n            </Badge>\n          </h3>\n        </Card.Header>\n        <Card.Body>\n          {this.description}\n          {this.flavors}\n          {this.ingredients}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n"],"sourceRoot":""}