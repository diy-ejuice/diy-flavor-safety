{"version":3,"sources":["webpack:///./src/pages/flavor.js"],"names":["FlavorPage","props","data","flavor","vendor","ingredients","state","nodes","render","this","title","name","className","to","Header","Body","getVendorSlug","activeKey","map","ingredient","action","key","as","Link","getIngredientSlug","variant","getCategoryVariant","category","Component","query"],"mappings":"qfAgBqBA,E,0BAKnB,WAAYC,GAAQ,IAAD,KACjB,cAAMA,IAAN,MAISA,MADPC,KAAQC,EAJO,EAIPA,OAAQC,EAJD,EAICA,OAAQC,EAJT,EAISA,YAJT,OAOjB,EAAKC,MAAQ,CACXH,SACAE,YAAaA,EAAYE,MACzBH,UAVe,E,0GA6CnBI,OAAA,WAAU,IAAD,EACoBC,KAAKH,MAAxBH,EADD,EACCA,OAAQC,EADT,EACSA,OAEhB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKM,MAAK,iBAAmBP,EAAOQ,OACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAMC,GAAG,YAAT,WADF,MAC8CV,EAAOQ,OAGvD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAKG,OAAN,KACE,4BACGV,EAAOO,KADV,IACiBR,EAAOQ,OAG1B,kBAAC,IAAKI,KAAN,KACGN,KAAKL,OACLK,KAAKJ,mB,qCArDR,IACJD,EAAWK,KAAKH,MAAhBF,OAER,OAAO,kBAAC,OAAD,CAAMS,GAAIG,wBAAcZ,IAAxB,uB,kCAGU,IACTC,EAAgBI,KAAKH,MAArBD,YAER,OACE,kBAAC,WAAD,KACE,wBAAIO,UAAU,QAAd,8DAGA,kBAAC,IAAD,CAAWK,UAAU,IAClBZ,EAAYa,KAAI,SAAAC,GAAU,OACzB,kBAAC,IAAD,CACEC,QAAM,EACNC,IAAKF,EAAWR,KAChBW,GAAIC,OACJV,GAAIW,4BAAkBL,GACtBM,QAASC,6BAAmBP,EAAWQ,WAEtCR,EAAWR,gB,8BA1CciB,aAmF3BC,EAAK","file":"component---src-pages-flavor-js-4bba1559ad2fe2af274e.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { graphql, Link } from 'gatsby';\nimport React, { Component, Fragment } from 'react';\nimport {\n  Card,\n  Col,\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Row\n} from 'react-bootstrap';\n\nimport Layout from '~components/Layout';\nimport SEO from '~components/SEO';\nimport { getCategoryVariant, getIngredientSlug, getVendorSlug } from '~utils';\n\nexport default class FlavorPage extends Component {\n  static propTypes = {\n    data: PropTypes.object.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {\n      data: { flavor, vendor, ingredients }\n    } = this.props;\n\n    this.state = {\n      flavor,\n      ingredients: ingredients.nodes,\n      vendor\n    };\n  }\n\n  get vendor() {\n    const { vendor } = this.state;\n\n    return <Link to={getVendorSlug(vendor)}>Go to vendor page</Link>;\n  }\n\n  get ingredients() {\n    const { ingredients } = this.state;\n\n    return (\n      <Fragment>\n        <h6 className=\"mt-3\">\n          This flavor contains the following concerning ingredients:\n        </h6>\n        <ListGroup activeKey=\"\">\n          {ingredients.map(ingredient => (\n            <ListGroupItem\n              action\n              key={ingredient.name}\n              as={Link}\n              to={getIngredientSlug(ingredient)}\n              variant={getCategoryVariant(ingredient.category)}\n            >\n              {ingredient.name}\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const { flavor, vendor } = this.state;\n\n    return (\n      <Layout>\n        <SEO title={`Flavor Info - ${flavor.name}`} />\n        <Container>\n          <Row className=\"mb-3\">\n            <Col>\n              <Link to=\"/flavors\">Flavors</Link> &raquo; {flavor.name}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card>\n                <Card.Header>\n                  <h3>\n                    {vendor.name} {flavor.name}\n                  </h3>\n                </Card.Header>\n                <Card.Body>\n                  {this.vendor}\n                  {this.ingredients}\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nexport const query = graphql`\n  query FlavorSearchQuery(\n    $vendor: String\n    $name: String\n    $ingredients: [String]\n  ) {\n    flavor: flavorsJson(vendor: { eq: $vendor }, name: { eq: $name }) {\n      name\n    }\n    vendor: vendorsJson(code: { eq: $vendor }) {\n      code\n      name\n    }\n    ingredients: allIngredientsJson(\n      filter: { casNumber: { in: $ingredients } }\n    ) {\n      nodes {\n        name\n        category\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}